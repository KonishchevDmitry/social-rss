#!/usr/bin/env python3

"""Social RSS web server."""

import argparse
import errno
import logging
import os
import sys

import tornado.ioloop
import tornado.web

sys.path.insert(0, os.path.join(os.path.dirname(__file__), "pycl"))
import pycl.log

import social_rss.vk
from social_rss import config

LOG = logging.getLogger("social_rss.main")


def main():
    """The script"s main function."""

    args = parse_args()

    # Fill the config
    config.DEBUG_MODE = args.debug | args.offline_debug
    config.OFFLINE_DEBUG_MODE = args.offline_debug
    config.WRITE_OFFLINE_DEBUG = args.write_offline_debug

    pycl.log.setup(include_time=True, debug_mode=config.DEBUG_MODE)

    if config.WRITE_OFFLINE_DEBUG:
        try:
            os.mkdir(config.OFFLINE_DEBUG_PATH)
        except OSError as e:
            if e.errno != errno.EEXIST:
                raise

    application = tornado.web.Application([
        ("/vk.rss", social_rss.vk.RequestHandler),
    ], debug=config.DEBUG_MODE)

    application.listen(args.port)
    tornado.ioloop.IOLoop.instance().start()


def parse_args():
    """Parses command-line arguments."""

    parser = argparse.ArgumentParser(description = "Social RSS web server")

    debug_group = parser.add_mutually_exclusive_group()

    debug_group.add_argument("-d", "--debug", action="store_true",
        help="run in debug mode")

    debug_group.add_argument("-o", "--offline-debug", action="store_true",
        help="run in offline debug mode")

    debug_group.add_argument("-w", "--write-offline-debug", action="store_true",
        help="dump network data for offline debug mode")

    parser.add_argument("port", type=int, help="port to listen to on")

    args = parser.parse_args()

    return args


if __name__ == "__main__":
    main()
